{
  "code": "#!/usr/bin/env python\n# coding: utf-8\n\nimport os\nimport numpy as np\nimport pickle\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport imgkit\n\nRAW_DATA = r'./data/results.pkl'\nOUTPUTS_DIR = r'./outputs'\nassert os.path.exists(RAW_DATA)\nif not os.path.exists(OUTPUTS_DIR):\n    os.makedirs(OUTPUTS_DIR)\n\nresults = pickle.load(open(RAW_DATA, 'rb'), encoding='latin1')\n\n\ndef highlight_max(data, color='yellow'):\n    '''\n    highlight the maximum in a Series or DataFrame\n    # https://stackoverflow.com/questions/45606458/python-pandas-highlighting-maximum-value-in-column\n    '''\n    attr = 'font-weight: bold'  # 'background-color: {}'.format(color)\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  # from .apply(axis=None)\n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''), index=data.index, columns=data.columns)\n\n\ndef to_multiindex(data_table):\n    def _split_column_name(name):\n        tokens = name.split('|')\n        return [t for t in tokens]\n\n    tokens = [_split_column_name(a) for a in data_table.columns]\n    max_level = max([len(token) for token in tokens])\n    for token in tokens:\n        if len(token) < max_level:\n            token.extend([np.nan for _ in range(max_level - len(token))])\n    res = data_table.copy()\n\n    tuples = [tuple('' if pd.isnull(x[i]) else x[i] for i in range(max_level)) for x in tokens]\n    res.columns = pd.MultiIndex.from_tuples(tuples)\n    return res\n\n\n_ALL_FIGURES = []\n\n\ndef save_table(styled_table, figname, show=False, quality=89, latex_order=9999, latex_caption=''):\n    html_table = styled_table.render()\n    options = {'quiet': '', 'quality': quality}\n    figpath = os.path.join(OUTPUTS_DIR, figname)\n    if not os.path.exists(os.path.dirname(figpath)):\n        os.makedirs(os.path.dirname(figpath))\n    imgkit.from_string(html_table, figpath, options=options)\n    print('Created table: {}'.format(figpath))\n    if latex_order is not None:\n        _ALL_FIGURES.append({'path': figpath, 'order': latex_order, 'caption': latex_caption})\n\n\ndef save_figure(fig, figname, dpi=100, latex_order=9999, latex_caption=''):\n    figpath = os.path.join(OUTPUTS_DIR, figname)\n    if not os.path.exists(os.path.dirname(figpath)):\n        os.makedirs(os.path.dirname(figpath))\n    fig.savefig(figpath, bbox_inches='tight', dpi=dpi)\n    print('Created figure: {}'.format(figpath))\n    if latex_order is not None:\n        _ALL_FIGURES.append({'path': figpath, 'order': latex_order, 'caption': latex_caption})\n    plt.close(fig)\n\n\ndf = pd.DataFrame(results)\ndf['model'] = df['model'] + '_' + df['version']\nfor col in ['freq', 'bc', 'model', 'pol']:\n    df[col] = df[col].astype('category')\n\nfor col in ['pbMass', 'wbMass', 'hMass']:\n    df[col] = df[col].astype('float64')\ndf.head()\n\ndf = df[(df.pol == 'CP')]\n\npd.options.display.float_format = '{:,.2f}'.format\n\n# Apply normalization factors\n\n# rescale E fields to 1muT (rms) incident B1 field at isocentre of empty RF coil\ndf['ErmsHead_1mu'] = df['ErmsHead_raw'] / df['B1rms_empty']\ndf['ErmsLimbs_1mu'] = df['ErmsLimbs_raw'] / df['B1rms_empty']\ndf['ErmsBody_1mu'] = df['ErmsBody_raw'] / df['B1rms_empty']\n\n# rescale SAR values to 1muT (rms) incident B1 field at isocentre of empty RF coil\ndf['hSAR_1mu'] = df['hSAR_raw'] / (df['B1rms_empty']**2)\ndf['wbSAR_1mu'] = df['wbSAR_raw'] / (df['B1rms_empty']**2)\ndf['pbSAR_1mu'] = df['pbSAR_raw'] / (df['B1rms_empty']**2)\n\ndf['pbSARlimitNormal'] = 10.0 - 8.0 * df['pbMass'] / df['wbMass']\ndf['pbSARlimitFirst'] = 10.0 - 6.0 * df['pbMass'] / df['wbMass']\n\nc1 = 3.2 / df['hSAR_1mu']\nc2n = 2.0 / df['wbSAR_1mu']\nc2f = 4.0 / df['wbSAR_1mu']\nc3n = df['pbSARlimitNormal'] / df['pbSAR_1mu']\nc3f = df['pbSARlimitFirst'] / df['pbSAR_1mu']\n\ndf['limitNormal'] = '-'\ndf.loc[c1 <= np.minimum(c2n, c3n), 'limitNormal'] = 'h'\ndf.loc[c2n <= np.minimum(c1, c3n), 'limitNormal'] = 'wb'\ndf.loc[c3n <= np.minimum(c1, c2n), 'limitNormal'] = 'pb'\ndf['limitFirst'] = '-'\ndf.loc[c1 <= np.minimum(c2f, c3f), 'limitFirst'] = 'h'\ndf.loc[c2f <= np.minimum(c1, c3f), 'limitFirst'] = 'wb'\ndf.loc[c3f <= np.minimum(c1, c2f), 'limitFirst'] = 'pb'\n\n# scaling factors at operating modes\ndf['ScalingNormal'] = np.minimum(\n    7.0,\n    np.sqrt(\n        np.minimum(np.minimum(3.2 / df['hSAR_1mu'], 2.0 / df['wbSAR_1mu']), df['pbSARlimitNormal'] / df['pbSAR_1mu'])))\ndf['ScalingFirst'] = np.minimum(\n    7.0,\n    np.sqrt(np.minimum(np.minimum(3.2 / df['hSAR_1mu'], 4.0 / df['wbSAR_1mu']),\n                       df['pbSARlimitFirst'] / df['pbSAR_1mu'])))\n\n# rescale E fields to SAR limits at operating modes\ndf['ErmsHeadNormalOM'] = df['ErmsHead_1mu'] * df['ScalingNormal']\ndf['ErmsLimbsNormalOM'] = df['ErmsLimbs_1mu'] * df['ScalingNormal']\ndf['ErmsBodyNormalOM'] = df['ErmsBody_1mu'] * df['ScalingNormal']\n\ndf['ErmsHeadFirstOM'] = df['ErmsHead_1mu'] * df['ScalingFirst']\ndf['ErmsLimbsFirstOM'] = df['ErmsLimbs_1mu'] * df['ScalingFirst']\ndf['ErmsBodyFirstOM'] = df['ErmsBody_1mu'] * df['ScalingFirst']\n\ndf['B1plusRatioI'] = df['B1rmsIiso'] / df['B1rms']\ndf['B1plusRatioQ'] = df['B1rmsQiso'] / df['B1rms']\n\n# check that none of the SAR limits are exceeded\n_eps = 1e-14  # machine precision tolerance\nassert all(df['pbSAR_1mu'] * (df['ScalingNormal']**2) <= df['pbSARlimitNormal'] + _eps)\nassert all(df['pbSAR_1mu'] * (df['ScalingFirst']**2) <= df['pbSARlimitFirst'] + _eps)\nassert all(df['hSAR_1mu'] * (df['ScalingNormal']**2) <= 3.2 + _eps)\nassert all(df['wbSAR_1mu'] * (df['ScalingNormal']**2) <= 2.0 + _eps)\nassert all(df['hSAR_1mu'] * (df['ScalingFirst']**2) <= 3.2 + _eps)\nassert all(df['wbSAR_1mu'] * (df['ScalingFirst']**2) <= 4.0 + _eps)\n\ndf.head()\ndf.describe()\n\nrenaming_dict = {\n    'ErmsFirstOM_max': 'Erms First-Level Operating Mode (V/m)',\n    'ErmsFirstOM': 'Erms First-Level Operating Mode (V/m)',\n    'ErmsFirst': 'Erms First-Level Operating Mode (V/m)',\n    'ErmsNormalOM_max': 'Erms Normal Operating Mode (V/m)',\n    'ErmsNormalOM': 'Erms Normal Operating Mode (V/m)',\n    'ErmsNormal': 'Erms Normal Operating Mode (V/m)',\n    'Erms_1mu_max': 'Erms per 1 muT incident B1 field (V/m)',\n    'Erms': 'Erms per 1 muT incident B1 field (V/m)',\n    'Body': 'Trunk',\n    'Limbs': 'Limbs',\n    'freq': 'Frequency',\n    'pos': 'Position (mm)',\n    'B1 RMS': 'B1 RMS (muT)',\n    'limit': 'SAR limit'\n}\n\ndf[(df.model == 'Fats_V3.2')]\n\n# # Tables P1-P4 like in AnnexP (single birdcage)\n# For both 1.5T and 3.0T\n\ncm = sns.light_palette((1, 0.7, 0.6), as_cmap=True)  #, as_cmap=True)\n\nmodels = ['Fats_V3.2', 'Fats_V3', 'Duke_V3', 'Louis_V3', 'Ella_V3']\n\nfor model, frequency in [(_m, _f) for _m in models for _f in [64, 128]]:\n    birdcage = 'HP_B70_L60'\n    dff = df[(df.model == model) & (df.freq == frequency) & (df.bc == birdcage) & (df.pos <= 1500) & (df.pol == 'CP')]\n    cols = [\n        'pos', 'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ScalingNormal', 'ScalingFirst', 'limitNormal',\n        'ErmsHeadNormalOM', 'ErmsBodyNormalOM', 'ErmsLimbsNormalOM', 'limitFirst', 'ErmsHeadFirstOM', 'ErmsBodyFirstOM',\n        'ErmsLimbsFirstOM'\n    ]\n    old_names = [\n        'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ErmsHeadNormalOM', 'ErmsBodyNormalOM', 'ErmsLimbsNormalOM',\n        'ErmsHeadFirstOM', 'ErmsBodyFirstOM', 'ErmsLimbsFirstOM', 'ScalingNormal', 'ScalingFirst', 'limitNormal',\n        'limitFirst'\n    ]\n    new_names = [\n        'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body', 'ErmsNormal|Limbs',\n        'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs', 'Scaling Factor|Normal', 'Scaling Factor|First Level',\n        'limit|Normal', 'limit|First Level'\n    ]\n    dff = dff[cols].rename(columns={o: n for o, n in zip(old_names, new_names)})\n    dff = to_multiindex(dff)\n    table = dff.rename(columns=renaming_dict).style.background_gradient(\n        cmap=cm).apply(highlight_max).set_table_attributes(\n            'border=1 cellspacing=\"3\" cellpadding=\"10\" style=\"text-align: center\"').set_precision(3).set_caption(\n                'Induced Erms - {} {}MHz'.format(model, frequency)).hide_index()  #.format(\"{0:.2g}\")\n    latex_caption = '[Same as AnnexP tables P1-P4] Model: {}, Frequency: {} MHz, Birdcage: {}'.format(\n        model, frequency, birdcage)\n    save_table(table,\n               'single_birdcage/{freq}/table_{bc}_{m}_{freq}.png'.format(bc=birdcage, m=model, freq=frequency),\n               show=True,\n               latex_order=2,\n               latex_caption=latex_caption)\n\n    dff.rename(columns=renaming_dict).to_excel(r'D:\\mrixvip\\annexP\\tableP1_{}_{}.xlsx'.format(model, frequency))\n\n# ## Table P5 like in AnnexP (single birdcage)\n# for both 1.5T and 3.0T\n\nfor frequency in [64, 128]:\n    birdcage = 'HP_B70_L60'\n    dff = df[(df.freq == frequency) & (df.bc == birdcage) & (df.pos <= 900) & (df.pol == 'CP')]\n\n    def get_maxima(x):\n        old_names = [\n            'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ErmsHeadNormalOM', 'ErmsBodyNormalOM',\n            'ErmsLimbsNormalOM', 'ErmsHeadFirstOM', 'ErmsBodyFirstOM', 'ErmsLimbsFirstOM'\n        ]\n        new_names = [\n            'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body', 'ErmsNormal|Limbs',\n            'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs'\n        ]\n        new_df = pd.DataFrame()\n        for q1, q2 in zip(old_names, new_names):\n            new_df[q2] = np.array([x[q1].max()])\n        return new_df[new_names]\n\n    grouped = get_maxima(dff)\n    grouped2 = to_multiindex(grouped)\n    grouped2 = grouped2.stack([1])[['Erms', 'ErmsNormal', 'ErmsFirst']]\n    # remove one index level (only one value in this index: 0)\n    grouped2.index = grouped2.index.droplevel(0)\n    table = grouped2.rename(columns=renaming_dict).style.set_caption(\n        'Conservative induced incident E_rms values for testing according to Tier 1').set_precision(3).set_properties(\n            width='150px').set_table_attributes('border=1 cellspacing=\"0\" cellpadding=\"10\" style=\"text-align: center\"')\n    latex_caption = '[Same as AnnexP Table P5] Conservative induced incident E_rms values for testing according to Tier 1. Frequency: {} MHz, Birdcage: {}'.format(\n        frequency, birdcage)\n    save_table(table,\n               'single_birdcage/{freq}/table_aggregated_{bc}_{freq}.png'.format(bc=birdcage, freq=frequency),\n               show=True,\n               latex_order=1,\n               latex_caption=latex_caption)\n    grouped2.rename(columns=renaming_dict).to_excel(r'D:\\mrixvip\\annexP\\tableP5_{}.xlsx'.format(frequency))\n\ngrouped2.rename(columns=renaming_dict)\n\ngrouped2.rename(columns=renaming_dict).to_excel(r'D:\\mrixvip\\annexP\\tableP1.xlsx')\n\n# # B1 fields\n\nfor model, frequency in [(_m, _f) for _m in models for _f in [64, 128]]:\n    birdcage = 'HP_B70_L60'\n    dff = df[(df.model == model) & (df.freq == frequency) & (df.bc == birdcage) & (df.pos <= 900) & (df.pol == 'CP')]\n    cols = [\n        'pos',\n        'B1SliceMeanRMS',\n        'B1rms',\n        'B1rms_empty',\n        'ErmsHead_raw',\n        'ErmsBody_raw',\n        'ErmsLimbs_raw',\n        'hSAR_raw',\n        'wbSAR_raw',\n        'pbSAR_raw',\n    ]\n    old_names = [\n        'B1SliceMeanRMS', 'B1rms', 'B1rms_empty', 'ErmsHead_raw', 'ErmsBody_raw', 'ErmsLimbs_raw', 'hSAR_raw',\n        'wbSAR_raw', 'pbSAR_raw'\n    ]\n    new_names = [\n        'B1 RMS|Slice Mean', 'B1 RMS|Isocenter', 'B1 RMS|Empty Birdcage', 'Erms (not rescaled)|Head',\n        'Erms (not rescaled)|Body', 'Erms (not rescaled)|Limbs', 'SAR (not rescaled)|Head',\n        'SAR (not rescaled)|WholeBody', 'SAR (not rescaled)|PartialBody'\n    ]\n    dff = dff[cols].rename(columns={o: n for o, n in zip(old_names, new_names)})\n    dff = to_multiindex(dff)\n    table = dff.rename(columns=renaming_dict).style.background_gradient(\n        cmap=cm).apply(highlight_max).set_table_attributes(\n            'border=1 cellspacing=\"3\" cellpadding=\"10\" style=\"text-align: center\"').set_precision(3).set_caption(\n                '{} {}MHz'.format(model, frequency)).hide_index()  #.format(\"{0:.2g}\")\n    latex_caption = 'Raw data (not rescaled) from simulations. Frequency: {} MHz, Birdcage: {}'.format(\n        frequency, birdcage)\n    save_table(table,\n               'single_birdcage/{freq}/table_NotScaled_{bc}_{m}_{freq}.png'.format(bc=birdcage, m=model,\n                                                                                   freq=frequency),\n               show=True,\n               latex_order=3,\n               latex_caption=latex_caption)\n\n# # Get some more statistics between different models and birdcages\n\n\ndef create_agg(old_names, new_names):\n    def agg(x):\n        names = {}\n        columns = []\n        for q1, q2 in zip(old_names, new_names):\n            names.update({\n                '{}|max'.format(q2): x[q1].max(),\n                '{}|mean'.format(q2): x[q1].mean(),\n                '{}|std'.format(q2): x[q1].std(),\n            })\n            columns.extend(['{}|max'.format(q2), '{}|mean'.format(q2), '{}|std'.format(q2)])\n        return pd.Series(names, index=columns)\n\n    return agg\n\n\nmy_agg = create_agg(old_names=[\n    'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ErmsHeadNormalOM', 'ErmsBodyNormalOM', 'ErmsLimbsNormalOM',\n    'ErmsHeadFirstOM', 'ErmsBodyFirstOM', 'ErmsLimbsFirstOM'\n],\n                    new_names=[\n                        'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body',\n                        'ErmsNormal|Limbs', 'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs'\n                    ])\n\nfor frequency in [64, 128]:\n    grouped = df[df['freq'] == frequency].groupby(['freq', 'model']).apply(my_agg)\n    grouped2 = to_multiindex(grouped)\n    #\n    table = grouped2.stack([0, 1, 2]).unstack([2, 3, 4])[[\n        'Erms', 'ErmsNormal', 'ErmsFirst'\n    ]].rename(columns=renaming_dict).style.background_gradient(cmap=cm).apply(highlight_max).set_precision(\n        3).set_table_attributes('border=1 cellspacing=\"1\" cellpadding=\"6\"').set_caption(\n            'Induced incident E_rms values at {} MHz accross all birdcages'.format(frequency))\n\n    latex_caption = 'Max, mean and standard deviations are computed across all birdcages and all landmark positions'\n    save_table(table,\n               'extra_data/{freq}/per_model_std_allbc_{freq}.png'.format(freq=frequency),\n               show=True,\n               latex_order=5,\n               latex_caption=latex_caption)\n\nfor frequency in [64, 128]:\n    grouped = df[df['freq'] == frequency].groupby(['freq', 'model', 'bc']).apply(my_agg)\n    grouped2 = to_multiindex(grouped)\n    #\n    table = grouped2.stack([0, 1, 2]).unstack([-3, -2, -1])[[\n        'Erms', 'ErmsNormal', 'ErmsFirst'\n    ]].rename(columns=renaming_dict).style.background_gradient(cmap=cm).apply(highlight_max).set_precision(\n        3).set_table_attributes('border=1 cellspacing=\"1\" cellpadding=\"6\"').set_caption(\n            'Induced incident E_rms values at {} MHz for each birdcages'.format(frequency))\n    latex_caption = 'Max, mean and standard deviation are computed across all landmark positions.'\n    save_table(table,\n               'extra_data/{freq}/per_model-bc_{freq}.png'.format(freq=frequency),\n               show=True,\n               latex_order=7,\n               latex_caption=latex_caption)\n\nfor frequency in [64, 128]:\n    grouped = df[df['freq'] == frequency].groupby(['freq', 'model', 'bc']).apply(my_agg)\n    cols = [\n        'Erms|Head|max', 'Erms|Body|max', 'Erms|Limbs|max', 'ErmsNormal|Head|max', 'ErmsNormal|Body|max',\n        'ErmsNormal|Limbs|max', 'ErmsFirst|Head|max', 'ErmsFirst|Body|max', 'ErmsFirst|Limbs|max'\n    ]\n\n    def _my_agg(x):\n        old_names = cols\n        new_names = [\n            'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body', 'ErmsNormal|Limbs',\n            'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs'\n        ]\n        names = {}\n        columns = []\n        for q1, q2 in zip(old_names, new_names):\n            names.update({\n                '{}|max'.format(q2): x[q1].max(),\n                '{}|mean'.format(q2): x[q1].mean(),\n                '{}|std'.format(q2): x[q1].std(),\n            })\n            columns.extend(['{}|max'.format(q2), '{}|mean'.format(q2), '{}|std'.format(q2)])\n        return pd.Series(names, index=columns)\n\n    grouped2 = grouped[cols].groupby(['freq', 'model']).apply(_my_agg)\n    grouped2 = to_multiindex(grouped2)\n    table = grouped2.rename(columns=renaming_dict).stack().unstack().style.background_gradient(\n        cmap=cm).apply(highlight_max).set_caption(\n            'E_{rms} values at %s MHz (mean/std of worst position across birdcages)' %\n            frequency).set_precision(3).set_properties(\n                width='20px').set_table_attributes('border=1 cellspacing=\"0\" cellpadding=\"6\"')\n    latex_caption = 'First the max values for each birdcage are computed across all landmark positions.     This table reports the max, mean and standard deviation of these maxima across all birdcages.'\n    save_table(table,\n               'extra_data/{freq}/std_of_max_{freq}.png'.format(freq=frequency),\n               show=True,\n               latex_order=6,\n               latex_caption=latex_caption)\n\nfor frequency in [64, 128]:\n\n    def my_agg(x):\n        old_names = [\n            'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ErmsHeadNormalOM', 'ErmsBodyNormalOM',\n            'ErmsLimbsNormalOM', 'ErmsHeadFirstOM', 'ErmsBodyFirstOM', 'ErmsLimbsFirstOM'\n        ]\n        new_names = [\n            'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body', 'ErmsNormal|Limbs',\n            'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs'\n        ]\n        names = {}\n        columns = []\n        for q1, q2 in zip(old_names, new_names):\n            names.update({\n                '{}'.format(q2): x[q1].max(),\n            })\n            columns.extend(['{}'.format(q2)])\n        return pd.Series(names, index=columns)\n\n    grouped = df[df['freq'] == frequency].groupby(['freq', 'model']).apply(my_agg)\n    grouped2 = to_multiindex(grouped)\n    table = grouped2.rename(columns=renaming_dict).stack([0, 1]).unstack(\n        [2, 3]).style.background_gradient(cmap=cm).apply(highlight_max).set_caption(\n            'Induced incident $E_{rms}$ values at %s MHz' % frequency).set_precision(3).set_properties(\n                width='20px').set_table_attributes('border=1 cellspacing=\"0\" cellpadding=\"6\"')\n\n    latex_caption = 'Worst cases for each model, across all positions and all birdcages, at {} MHz'.format(frequency)\n    save_table(table,\n               'extra_data/{freq}/per_model_allbc_{freq}.png'.format(freq=frequency),\n               show=True,\n               latex_order=8,\n               latex_caption=latex_caption)\n\nfor frequency in [64, 128]:\n    dff = df[(df.freq == frequency) & (df.pol == 'CP')]\n\n    def get_maxima(x):\n        old_names = [\n            'ErmsHead_1mu', 'ErmsBody_1mu', 'ErmsLimbs_1mu', 'ErmsHeadNormalOM', 'ErmsBodyNormalOM',\n            'ErmsLimbsNormalOM', 'ErmsHeadFirstOM', 'ErmsBodyFirstOM', 'ErmsLimbsFirstOM'\n        ]\n        new_names = [\n            'Erms|Head', 'Erms|Body', 'Erms|Limbs', 'ErmsNormal|Head', 'ErmsNormal|Body', 'ErmsNormal|Limbs',\n            'ErmsFirst|Head', 'ErmsFirst|Body', 'ErmsFirst|Limbs'\n        ]\n        new_df = pd.DataFrame()\n        for q1, q2 in zip(old_names, new_names):\n            new_df[q2] = np.array([x[q1].max()])\n        return new_df[new_names]\n\n    grouped = get_maxima(dff)\n    grouped2 = to_multiindex(grouped)\n    grouped2 = grouped2.stack([1])[['Erms', 'ErmsNormal', 'ErmsFirst']]\n    # remove one index level (only one value in this index: 0)\n    grouped2.index = grouped2.index.droplevel(0)\n    table = grouped2.rename(columns=renaming_dict).style.set_caption(\n        'Conservative induced incident E_rms values for testing according to Tier 1').set_precision(3).set_properties(\n            width='150px').set_table_attributes('border=1 cellspacing=\"0\" cellpadding=\"10\" style=\"text-align: center\"')\n\n    latex_caption = 'Worst cases across all models, all birdcages, all positions at {} MHz'.format(frequency)\n    save_table(table,\n               'extra_data/{freq}/table_aggregated_allbc_{freq}.png'.format(freq=frequency),\n               show=True,\n               latex_order=10,\n               latex_caption=latex_caption)\n\n# # plots\n\n#plt.style.use('ggplot')\nplt.style.use('seaborn-whitegrid')\n\nplt.rcParams['font.family'] = 'DejaVu Sans'\nplt.rcParams['font.serif'] = 'Ubuntu'\nplt.rcParams['font.monospace'] = 'Ubuntu Mono'\nplt.rcParams['font.size'] = 10\nplt.rcParams['axes.labelsize'] = 10\nplt.rcParams['axes.labelweight'] = 'bold'\nplt.rcParams['axes.titlesize'] = 10\nplt.rcParams['xtick.labelsize'] = 8\nplt.rcParams['ytick.labelsize'] = 8\nplt.rcParams['legend.fontsize'] = 10\nplt.rcParams['figure.titlesize'] = 12\nplt.rcParams['figure.figsize'] = (8, 6)\n\nmarkers = {\n    'Duke': 'o',\n    'Fats': 's',\n    'Ella': 'v',\n    'Louis': 'd',\n}\n\nvalues_to_plot = [\n    ('ErmsHead_1mu', 'E_rms [Head] 1muT [V/m]'),\n    ('ErmsBody_1mu', 'E_rms [Trunk] 1muT [V/m]'),\n    ('ErmsLimbs_1mu', 'E_rms [Limbs] 1muT [V/m]'),\n    ('ErmsHeadNormalOM', 'E_rms [Head] Normal Operating Mode [V/m]'),\n    ('ErmsBodyNormalOM', 'E_rms [Trunk] Normal Operating Mode [V/m]'),\n    ('ErmsLimbsNormalOM', 'E_rms [Limbs] Normal Operating Mode [V/m]'),\n    ('ErmsHeadFirstOM', 'E_rms [Head] First-Level Operating Mode [V/m]'),\n    ('ErmsBodyFirstOM', 'E_rms [Trunk] First-Level Operating Mode [V/m]'),\n    ('ErmsLimbsFirstOM', 'E_rms [Limbs] First-Level Operating Mode [V/m]'),\n    ('ScalingNormal', 'B1 Scaling Factor Normal Operating Mode'),\n    ('ScalingFirst', 'B1 Scaling Factor First-Level Operating Mode'),\n]\n\nfor frequency in [64, 128]:\n    for value, value_name in values_to_plot:\n        grouped = df[df['freq'] == frequency].groupby(['model', 'pos']).agg({\n            value: ['min', 'mean', 'max']\n        }).unstack([0])\n        ax = grouped.loc[:, (value, 'mean')].plot(marker='.', linewidth=0.5)  #plt.show()\n        palette = sns.color_palette()\n        models = list(grouped.columns.levels[2])  # all models\n        models = [m for m in models if any(grouped.columns.get_level_values(2) == m)]  # drop models with no data\n        for index, model in enumerate(models):\n            ax.fill_between(grouped.index,\n                            grouped.loc[:, (value, 'mean', model)],\n                            grouped.loc[:, (value, 'max', model)],\n                            alpha=.1,\n                            color=palette[index])\n            ax.fill_between(grouped.index,\n                            grouped.loc[:, (value, 'min', model)],\n                            grouped.loc[:, (value, 'mean', model)],\n                            alpha=.1,\n                            color=palette[index])\n            ax.plot(grouped.loc[:, (value, 'max', model)], marker='.', linewidth=1.0, color=palette[index])\n            ax.plot(grouped.loc[:, (value, 'min', model)], marker='.', linewidth=0.1, color=palette[index])\n\n        ax.set_ylabel(value_name)\n        ax.set_xlabel('landmark position [mm]')\n        fig = plt.gcf()\n        #plt.show()\n        latex_caption = 'Mean, max and min values of {} across all birdcages at {} MHz'.format(value, frequency)\n        save_figure(fig,\n                    figname='extra_data/{freq}/{v}_{freq}.png'.format(v=value, freq=frequency),\n                    dpi=250,\n                    latex_order=20,\n                    latex_caption=latex_caption)\n\n# # Generate Latex file with all figures\n\nfigure_tplt = r\"\"\"\n\\begin{{figure}}\n\\centering\n%\n\\includegraphics[width=.9\\textwidth]{{{figpath}}}\n%\n\\caption{{ {caption} }}\n\\end{{figure}}\n\"\"\"\n\npreamble = r\"\"\"\n\\documentclass[twoside,a4paper]{article}\n\n\\usepackage{graphicx}\n\\usepackage{grffile}\n\\usepackage{fancyhdr}\n\\usepackage{lscape}\n\\usepackage{array}\n\\usepackage{amsmath}\n\\usepackage{pdfpages}\n\\usepackage{float}\n\\usepackage{placeins}\n\n\\usepackage[T1]{fontenc}\n\\usepackage{a4wide}\n\\usepackage{amsfonts}\n\\usepackage{mathtools}\n\\usepackage{pdfpages}\n\\extrafloats{200}\n\"\"\"\n\ndoc_tplt = r\"\"\"\n{preamble}\n\\begin{{document}}\n{content}\n\\end{{document}}\n\"\"\"\n\n\ndef _escape(s):\n    return s.replace('_', '\\_')\n\n\ncontent = []\nfor fig in sorted(_ALL_FIGURES, key=lambda x: x['order']):\n    content.append(\n        figure_tplt.format(figpath=os.path.relpath(fig['path'], OUTPUTS_DIR).replace('\\\\', '/'),\n                           caption=_escape(fig['caption'])))\nwith open(os.path.join(OUTPUTS_DIR, 'figures.tex'), 'w') as f:\n    f.write(doc_tplt.format(content=''.join(content), preamble=preamble))\n\n# # Render as PDF file\nimport subprocess\nlatex_filepath = os.path.join(OUTPUTS_DIR, 'figures.tex')\ncmd = ['pdflatex', '-interaction', 'nonstopmode', os.path.basename(latex_filepath)]\noutput = subprocess.check_output(cmd, cwd=os.path.dirname(latex_filepath),\n                                 stderr=subprocess.STDOUT)  #, timeout=100)  # only with Python3\nprint('Created {}'.format(latex_filepath[0:-3] + 'pdf'))\n",
  "input_data": "Example_PurePython_Postpro_Osparc.py"
}